{"ast":null,"code":"// // CreateGroupPage.tsx\n// import React, { useState } from 'react';\n// import { Navigate, useNavigate } from 'react-router-dom';\n// import { useGroups } from './GroupsContext';\n// import './CreateGroupPage.css';\n\n// interface CreateGroupPageProps {\n//   isLoggedIn: boolean;\n//   currentUser: string | null;\n// }\n\n// const CreateGroupPage: React.FC<CreateGroupPageProps> = ({ isLoggedIn, currentUser }) => {\n//   const [groupName, setGroupName] = useState('');\n//   const [description, setDescription] = useState('');\n//   const [isPrivate, setIsPrivate] = useState(false);\n//   const [maxMembers, setMaxMembers] = useState(10);\n//   const [entryFee, setEntryFee] = useState(0);\n//   const [isSubmitting, setIsSubmitting] = useState(false);\n//   const navigate = useNavigate();\n//   const { addGroup } = useGroups();\n\n//   if (!isLoggedIn) {\n//     return <Navigate to=\"/login\" replace />;\n//   }\n\n//   const handleSubmit = async (e: React.FormEvent) => {\n//     e.preventDefault();\n//     if (!currentUser) return;\n\n//     setIsSubmitting(true);\n\n//     try {\n//       addGroup({\n//         name: groupName,\n//         description,\n//         isPrivate,\n//         maxMembers,\n//         entryFee,\n//         owner: currentUser,\n//         members: [] // Will be populated by the context\n//       });\n\n//       // Reset form\n//       setGroupName('');\n//       setDescription('');\n//       setIsPrivate(false);\n//       setMaxMembers(10);\n//       setEntryFee(0);\n\n//       navigate('/groups');\n//     } catch (error) {\n//       console.error('Error creating group:', error);\n//     } finally {\n//       setIsSubmitting(false);\n//     }\n//   };\n\n//   return (\n//     <div className=\"create-group-container\">\n//       <h1 className=\"create-group-title\">Create New Group</h1>\n\n//       <form onSubmit={handleSubmit} className=\"create-group-form\">\n//         <div className=\"form-group\">\n//           <label className=\"form-label\" htmlFor=\"groupName\">\n//             Group Name *\n//           </label>\n//           <input\n//             id=\"groupName\"\n//             type=\"text\"\n//             value={groupName}\n//             onChange={(e) => setGroupName(e.target.value)}\n//             className=\"form-input\"\n//             required\n//             placeholder=\"Enter group name\"\n//             disabled={isSubmitting}\n//           />\n//         </div>\n\n//         <div className=\"form-group\">\n//           <label className=\"form-label\" htmlFor=\"description\">\n//             Description\n//           </label>\n//           <textarea\n//             id=\"description\"\n//             value={description}\n//             onChange={(e) => setDescription(e.target.value)}\n//             className=\"form-textarea\"\n//             placeholder=\"Describe your group and its purpose...\"\n//             disabled={isSubmitting}\n//           />\n//         </div>\n\n//         <div className=\"form-group\">\n//           <label className=\"form-label\" htmlFor=\"maxMembers\">\n//             Maximum Members\n//           </label>\n//           <input\n//             id=\"maxMembers\"\n//             type=\"number\"\n//             value={maxMembers}\n//             onChange={(e) => setMaxMembers(Number(e.target.value))}\n//             className=\"form-input\"\n//             min=\"2\"\n//             max=\"100\"\n//             disabled={isSubmitting}\n//           />\n//         </div>\n\n//         <div className=\"form-group\">\n//           <label className=\"form-label\" htmlFor=\"entryFee\">\n//             Entry Fee ($)\n//           </label>\n//           <input\n//             id=\"entryFee\"\n//             type=\"number\"\n//             value={entryFee}\n//             onChange={(e) => setEntryFee(Number(e.target.value))}\n//             className=\"form-input\"\n//             min=\"0\"\n//             step=\"0.01\"\n//             disabled={isSubmitting}\n//           />\n//         </div>\n\n//         <div className=\"checkbox-group\">\n//           <input\n//             id=\"isPrivate\"\n//             type=\"checkbox\"\n//             checked={isPrivate}\n//             onChange={(e) => setIsPrivate(e.target.checked)}\n//             className=\"checkbox-input\"\n//             disabled={isSubmitting}\n//           />\n//           <label htmlFor=\"isPrivate\" className=\"checkbox-label\">\n//             Private Group (invite only)\n//           </label>\n//         </div>\n\n//         <div className=\"form-buttons\">\n//           <button\n//             type=\"submit\"\n//             className=\"btn-primary\"\n//             disabled={isSubmitting || !groupName.trim()}\n//           >","map":{"version":3,"names":[],"sources":["/Users/michaelgarchitorena/Documents/GitHub/golf_project/golf-rankings-app/src/CreateGroupPage.tsx"],"sourcesContent":["// // CreateGroupPage.tsx\n// import React, { useState } from 'react';\n// import { Navigate, useNavigate } from 'react-router-dom';\n// import { useGroups } from './GroupsContext';\n// import './CreateGroupPage.css';\n\n// interface CreateGroupPageProps {\n//   isLoggedIn: boolean;\n//   currentUser: string | null;\n// }\n\n// const CreateGroupPage: React.FC<CreateGroupPageProps> = ({ isLoggedIn, currentUser }) => {\n//   const [groupName, setGroupName] = useState('');\n//   const [description, setDescription] = useState('');\n//   const [isPrivate, setIsPrivate] = useState(false);\n//   const [maxMembers, setMaxMembers] = useState(10);\n//   const [entryFee, setEntryFee] = useState(0);\n//   const [isSubmitting, setIsSubmitting] = useState(false);\n//   const navigate = useNavigate();\n//   const { addGroup } = useGroups();\n\n//   if (!isLoggedIn) {\n//     return <Navigate to=\"/login\" replace />;\n//   }\n\n//   const handleSubmit = async (e: React.FormEvent) => {\n//     e.preventDefault();\n//     if (!currentUser) return;\n\n//     setIsSubmitting(true);\n\n//     try {\n//       addGroup({\n//         name: groupName,\n//         description,\n//         isPrivate,\n//         maxMembers,\n//         entryFee,\n//         owner: currentUser,\n//         members: [] // Will be populated by the context\n//       });\n\n//       // Reset form\n//       setGroupName('');\n//       setDescription('');\n//       setIsPrivate(false);\n//       setMaxMembers(10);\n//       setEntryFee(0);\n\n//       navigate('/groups');\n//     } catch (error) {\n//       console.error('Error creating group:', error);\n//     } finally {\n//       setIsSubmitting(false);\n//     }\n//   };\n\n//   return (\n//     <div className=\"create-group-container\">\n//       <h1 className=\"create-group-title\">Create New Group</h1>\n\n//       <form onSubmit={handleSubmit} className=\"create-group-form\">\n//         <div className=\"form-group\">\n//           <label className=\"form-label\" htmlFor=\"groupName\">\n//             Group Name *\n//           </label>\n//           <input\n//             id=\"groupName\"\n//             type=\"text\"\n//             value={groupName}\n//             onChange={(e) => setGroupName(e.target.value)}\n//             className=\"form-input\"\n//             required\n//             placeholder=\"Enter group name\"\n//             disabled={isSubmitting}\n//           />\n//         </div>\n\n//         <div className=\"form-group\">\n//           <label className=\"form-label\" htmlFor=\"description\">\n//             Description\n//           </label>\n//           <textarea\n//             id=\"description\"\n//             value={description}\n//             onChange={(e) => setDescription(e.target.value)}\n//             className=\"form-textarea\"\n//             placeholder=\"Describe your group and its purpose...\"\n//             disabled={isSubmitting}\n//           />\n//         </div>\n\n//         <div className=\"form-group\">\n//           <label className=\"form-label\" htmlFor=\"maxMembers\">\n//             Maximum Members\n//           </label>\n//           <input\n//             id=\"maxMembers\"\n//             type=\"number\"\n//             value={maxMembers}\n//             onChange={(e) => setMaxMembers(Number(e.target.value))}\n//             className=\"form-input\"\n//             min=\"2\"\n//             max=\"100\"\n//             disabled={isSubmitting}\n//           />\n//         </div>\n\n//         <div className=\"form-group\">\n//           <label className=\"form-label\" htmlFor=\"entryFee\">\n//             Entry Fee ($)\n//           </label>\n//           <input\n//             id=\"entryFee\"\n//             type=\"number\"\n//             value={entryFee}\n//             onChange={(e) => setEntryFee(Number(e.target.value))}\n//             className=\"form-input\"\n//             min=\"0\"\n//             step=\"0.01\"\n//             disabled={isSubmitting}\n//           />\n//         </div>\n\n//         <div className=\"checkbox-group\">\n//           <input\n//             id=\"isPrivate\"\n//             type=\"checkbox\"\n//             checked={isPrivate}\n//             onChange={(e) => setIsPrivate(e.target.checked)}\n//             className=\"checkbox-input\"\n//             disabled={isSubmitting}\n//           />\n//           <label htmlFor=\"isPrivate\" className=\"checkbox-label\">\n//             Private Group (invite only)\n//           </label>\n//         </div>\n\n//         <div className=\"form-buttons\">\n//           <button\n//             type=\"submit\"\n//             className=\"btn-primary\"\n//             disabled={isSubmitting || !groupName.trim()}\n//           >\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}