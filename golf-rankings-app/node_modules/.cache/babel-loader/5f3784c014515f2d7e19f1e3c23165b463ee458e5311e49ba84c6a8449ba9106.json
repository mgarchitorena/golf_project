{"ast":null,"code":"var _jsxFileName = \"/Users/michaelgarchitorena/Documents/GitHub/golf_project/golf-rankings-app/src/PlayersPage.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport \"./PlayersPage.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlayersPage = () => {\n  _s();\n  const [players, setPlayers] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [debugInfo, setDebugInfo] = useState(\"\");\n  const getCountryCode = country => {\n    const countryMap = {\n      \"UNITED STATES\": \"us\",\n      \"NORTHERN IRELAND\": \"gb-nir\",\n      ENGLAND: \"gb-eng\",\n      SCOTLAND: \"gb-sct\",\n      WALES: \"gb-wls\",\n      SPAIN: \"es\",\n      AUSTRALIA: \"au\",\n      \"SOUTH KOREA\": \"kr\",\n      JAPAN: \"jp\",\n      NORWAY: \"no\",\n      SWEDEN: \"se\",\n      DENMARK: \"dk\",\n      GERMANY: \"de\",\n      FRANCE: \"fr\",\n      ITALY: \"it\",\n      CANADA: \"ca\",\n      \"SOUTH AFRICA\": \"za\",\n      ARGENTINA: \"ar\",\n      CHILE: \"cl\",\n      COLOMBIA: \"co\",\n      MEXICO: \"mx\",\n      THAILAND: \"th\",\n      \"CHINESE TAIPEI\": \"tw\",\n      CHINA: \"cn\",\n      INDIA: \"in\",\n      PHILIPPINES: \"ph\",\n      \"NEW ZEALAND\": \"nz\",\n      FINLAND: \"fi\",\n      AUSTRIA: \"at\",\n      BELGIUM: \"be\",\n      NETHERLANDS: \"nl\",\n      IRELAND: \"ie\",\n      \"CZECH REPUBLIC\": \"cz\",\n      SLOVENIA: \"si\"\n    };\n    return countryMap[country.toUpperCase()] || \"unknown\";\n  };\n  const getRankChange = (rank, priorRank) => {\n    const change = priorRank - rank;\n    if (change > 0) {\n      return {\n        type: \"up\",\n        value: change,\n        symbol: \"▲\"\n      };\n    } else if (change < 0) {\n      return {\n        type: \"down\",\n        value: Math.abs(change),\n        symbol: \"▼\"\n      };\n    } else {\n      return {\n        type: \"same\",\n        value: 0,\n        symbol: \"–\"\n      };\n    }\n  };\n  useEffect(() => {\n    const fetchPlayers = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        setDebugInfo(\"Loading data from local file...\");\n\n        // Load from local JSON file instead of API\n        const response = await fetch(\"/world_rankings.json\");\n        if (!response.ok) {\n          throw new Error(`Failed to load world_rankings.json: ${response.status} ${response.statusText}`);\n        }\n        const data = await response.json();\n        console.log(\"Raw JSON Data:\", data);\n\n        // Extract players from the API response\n        if (data.players && Array.isArray(data.players)) {\n          const playersData = data.players.slice(0, 50); // Show top 50 players\n\n          setPlayers(playersData);\n          setDebugInfo(`✅ Successfully loaded ${playersData.length} players from ${data.name} (${data.season})`);\n          setError(null);\n        } else {\n          throw new Error(\"No players array found in the response\");\n        }\n      } catch (err) {\n        console.error(\"Error loading local data:\", err);\n        let errorMessage = \"Unknown error occurred\";\n        if (err.message.includes(\"Failed to load world_rankings.json\")) {\n          errorMessage = \"📁 File Not Found: Make sure world_rankings.json is in your public folder\";\n        } else if (err.message.includes(\"Unexpected token\")) {\n          errorMessage = \"📄 JSON Parse Error: world_rankings.json contains invalid JSON\";\n        } else if (err.message.includes(\"No player\")) {\n          errorMessage = `📊 Data Format Issue: ${err.message}`;\n        } else {\n          errorMessage = `❌ Error: ${err.message}`;\n        }\n        setError(errorMessage);\n        setDebugInfo(`Error: ${err.message}`);\n        setPlayers([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchPlayers();\n  }, []);\n  const renderPlayerRow = (player, index) => {\n    const rankChange = getRankChange(player.rank, player.prior_rank);\n    const countryCode = getCountryCode(player.country);\n    return /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n        className: \"rank-cell\",\n        children: [player.rank, /*#__PURE__*/_jsxDEV(\"span\", {\n          className: `rank-change ${rankChange.type}`,\n          children: rankChange.symbol\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        className: \"rank-cell\",\n        children: player.prior_rank\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"country-flag\",\n          style: {\n            backgroundImage: countryCode !== \"unknown\" ? `url(https://flagcdn.com/20x15/${countryCode}.png)` : \"none\",\n            backgroundColor: countryCode === \"unknown\" ? \"#ccc\" : \"transparent\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this), player.country]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        className: \"player-name-cell\",\n        children: `${player.first_name} ${player.last_name}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        className: \"points-cell\",\n        children: player.statistics.avg_points.toFixed(4)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        className: \"events-cell\",\n        children: player.statistics.events_played\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        className: \"points-change points-lost\",\n        children: player.statistics.points_lost.toFixed(2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        className: \"points-change points-gained\",\n        children: player.statistics.points_gained.toFixed(2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this)]\n    }, player.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this);\n  };\n  const renderLoadingRow = index => /*#__PURE__*/_jsxDEV(\"tr\", {\n    className: \"loading-row\",\n    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n      children: \"--\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: \"--\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: \"--\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: \"--\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: \"--\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: \"--\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: \"--\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this)]\n  }, `loading-${index}`, true, {\n    fileName: _jsxFileName,\n    lineNumber: 197,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"players-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"page-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"World Golf Rankings\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Current top players in professional golf\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-container\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading players from local data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\uD83D\\uDEA8 Data Loading Issue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Error:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 13\n        }, this), \" \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"details\", {\n        children: [/*#__PURE__*/_jsxDEV(\"summary\", {\n          children: \"Setup Instructions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Create the file:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 17\n            }, this), \" Add world_rankings.json to your public folder\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"File location:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 243,\n              columnNumber: 17\n            }, this), \" public/world_rankings.json (in React apps)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"JSON format:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 17\n            }, this), \" Make sure the file contains valid JSON\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Browser Console:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 17\n            }, this), \" Check for detailed error messages\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table-container\",\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"players-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Ranking\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 264,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Last Week\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 265,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Ctry\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 267,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Average Points\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Events Played (Divisor)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Points Lost (2025)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 270,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Points Won (2025)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 271,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: loading ? Array(20).fill(null).map((_, index) => renderLoadingRow(index)) : players.map((player, index) => renderPlayerRow(player, index))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      className: \"page-footer\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: players.length > 0 ? `Showing ${players.length} players • Data from local file` : \"Data from local file\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 210,\n    columnNumber: 5\n  }, this);\n};\n_s(PlayersPage, \"78SakIjO2T7YZqSErYw5xWm/j68=\");\n_c = PlayersPage;\nexport default PlayersPage;\n\n// import { useEffect, useState } from \"react\";\n// import \"./PlayersPage.css\";\n\n// interface Player {\n//   id: string;\n//   name: string;\n//   country: string;\n//   rank: number;\n//   points: number;\n// }\n\n// interface ApiResponse {\n//   rankings?: Player[];\n//   players?: Player[];\n//   data?: any;\n//   [key: string]: any;\n// }\n\n// const PlayersPage: React.FC = () => {\n//   const [players, setPlayers] = useState<Player[]>([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState<string | null>(null);\n//   const [debugInfo, setDebugInfo] = useState<string>(\"\");\n\n//   useEffect(() => {\n//     const fetchPlayers = async () => {\n//       try {\n//         setLoading(true);\n//         setError(null);\n//         setDebugInfo(\"Loading data from local file...\");\n\n//         // Load from local JSON file instead of API\n//         const response = await fetch(\"/world_rankings.json\");\n\n//         if (!response.ok) {\n//           throw new Error(\n//             `Failed to load world_rankings.json: ${response.status} ${response.statusText}`\n//           );\n//         }\n\n//         const data: ApiResponse = await response.json();\n//         console.log(\"Raw JSON Data:\", data);\n//         console.log(\"Response keys:\", Object.keys(data));\n\n//         // Extract players from the specific Sportradar WGR format\n//         let playersData: Player[] = [];\n\n//         if (data.players && Array.isArray(data.players)) {\n//           playersData = data.players.map((player: any) => ({\n//             id: player.id || \"unknown\",\n//             name:\n//               `${player.first_name || \"\"} ${player.last_name || \"\"}`.trim() ||\n//               \"Unknown Player\",\n//             country: player.country || \"Unknown\",\n//             rank: player.rank || 0,\n//             points:\n//               player.statistics?.avg_points ||\n//               player.statistics?.avg_points ||\n//               0,\n//           }));\n//           setDebugInfo(\n//             `Found ${playersData.length} players from Sportradar WGR format`\n//           );\n//         } else {\n//           // Fallback to other possible formats\n//           if (data.rankings && Array.isArray(data.rankings)) {\n//             playersData = data.rankings.map((player: any, index: number) => ({\n//               id: player.id || `player-${index + 1}`,\n//               name: player.name || \"Unknown Player\",\n//               country: player.country || player.nationality || \"Unknown\",\n//               rank: player.rank || player.position || index + 1,\n//               points: player.points || player.average_points || 0,\n//             }));\n//           } else if (Array.isArray(data)) {\n//             playersData = data.map((player: any, index: number) => ({\n//               id: player.id || `player-${index + 1}`,\n//               name: player.name || player.full_name || \"Unknown Player\",\n//               country: player.country || player.nationality || \"Unknown\",\n//               rank: player.rank || index + 1,\n//               points: player.avg_points || 0,\n//             }));\n//           } else {\n//             // Look for any array in the response\n//             const possibleArrays = Object.entries(data)\n//               .filter(([key, value]) => Array.isArray(value))\n//               .map(([key, value]) => ({ key, value: value as any[] }));\n\n//             if (possibleArrays.length > 0) {\n//               const arrayData = possibleArrays[0].value;\n//               playersData = arrayData.map((player: any, index: number) => ({\n//                 id: player.id || `player-${index + 1}`,\n//                 name: player.name || player.full_name || \"Unknown Player\",\n//                 country: player.country || player.nationality || \"Unknown\",\n//                 rank: player.rank || index + 1,\n//                 points: player.avg_points || 0,\n//               }));\n//               setDebugInfo(\n//                 `Found ${playersData.length} players in '${possibleArrays[0].key}' field`\n//               );\n//             } else {\n//               console.log(\"Unexpected data structure:\", data);\n//               setDebugInfo(\n//                 `Unexpected response format. Keys: ${Object.keys(data).join(\n//                   \", \"\n//                 )}`\n//               );\n//               throw new Error(\n//                 `No player array found. Available keys: ${Object.keys(\n//                   data\n//                 ).join(\", \")}`\n//               );\n//             }\n//           }\n//         }\n\n//         if (playersData.length === 0) {\n//           throw new Error(\"No player data found in response\");\n//         }\n\n//         // Clean and validate the data\n//         const validPlayers = playersData\n//           .filter(\n//             (player) =>\n//               player && player.name && player.name !== \"Unknown Player\"\n//           )\n//           .slice(0, 20); // Top 20 players\n\n//         if (validPlayers.length === 0) {\n//           throw new Error(\"No valid player data after filtering\");\n//         }\n\n//         setPlayers(validPlayers);\n//         setDebugInfo(\n//           `✅ Successfully loaded ${validPlayers.length} players from local file`\n//         );\n//         setError(null);\n//       } catch (err: any) {\n//         console.error(\"Error loading local data:\", err);\n\n//         let errorMessage = \"Unknown error occurred\";\n\n//         if (err.message.includes(\"Failed to load world_rankings.json\")) {\n//           errorMessage =\n//             \"📁 File Not Found: Make sure world_rankings.json is in your public folder\";\n//         } else if (err.message.includes(\"Unexpected token\")) {\n//           errorMessage =\n//             \"📄 JSON Parse Error: world_rankings.json contains invalid JSON\";\n//         } else if (err.message.includes(\"No player\")) {\n//           errorMessage = `📊 Data Format Issue: ${err.message}`;\n//         } else {\n//           errorMessage = `❌ Error: ${err.message}`;\n//         }\n\n//         setError(errorMessage);\n//         setDebugInfo(`Error: ${err.message}`);\n//         setPlayers([]);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchPlayers();\n//   }, []);\n\n//   const renderPlayerCard = (player: Player | null, index: number) => (\n//     <div key={index} className=\"player-card\">\n//       {player ? (\n//         <>\n//           <div className=\"player-rank\">#{player.rank}</div>\n//           <h3 className=\"player-name\">{player.name}</h3>\n//           <p className=\"player-country\">{player.country}</p>\n//           <div className=\"player-points\">\n//             {typeof player.points === \"number\" && player.points > 0\n//               ? `${player.points.toFixed(3)} points`\n//               : \"N/A points\"}\n//           </div>\n//         </>\n//       ) : (\n//         <>\n//           <div className=\"player-rank placeholder\">#--</div>\n//           <h3 className=\"player-name placeholder\">Loading...</h3>\n//           <p className=\"player-country placeholder\">--</p>\n//           <div className=\"player-points placeholder\">--Average points</div>\n//         </>\n//       )}\n//     </div>\n//   );\n\n//   return (\n//     <div className=\"players-page\">\n//       <header className=\"page-header\">\n//         <h1>World Golf Rankings</h1>\n//         <p>Current top players in professional golf</p>\n//       </header>\n\n//       {/* Debug Info */}\n//       {debugInfo && (\n//         <div className=\"debug-info\">\n//           <small>Debug: {debugInfo}</small>\n//         </div>\n//       )}\n\n//       {loading && (\n//         <div className=\"loading-container\">\n//           <p>Loading players from local data...</p>\n//         </div>\n//       )}\n\n//       {error && (\n//         <div className=\"error-container\">\n//           <h3>🚨 Data Loading Issue</h3>\n//           <p>\n//             <strong>Error:</strong> {error}\n//           </p>\n//           <details>\n//             <summary>Setup Instructions</summary>\n//             <ul>\n//               <li>\n//                 <strong>Create the file:</strong> Add world_rankings.json to\n//                 your public folder\n//               </li>\n//               <li>\n//                 <strong>File location:</strong> public/world_rankings.json (in\n//                 React apps)\n//               </li>\n//               <li>\n//                 <strong>JSON format:</strong> Make sure the file contains valid\n//                 JSON\n//               </li>\n//               {/* <li><strong>Sample structure:</strong> {\"id\": \"...\", \"name\": \"World Golf Ranking\", \"players\": [{\"id\": \"...\", \"first_name\": \"Scottie\", \"last_name\": \"Scheffler\", \"country\": \"UNITED STATES\", \"rank\": 1, \"statistics\": {\"points\": 752.5}}]}</li> */}\n//               <li>\n//                 <strong>Browser Console:</strong> Check for detailed error\n//                 messages\n//               </li>\n//             </ul>\n//           </details>\n//         </div>\n//       )}\n\n//       <div className=\"players-grid\">\n//         {Array(20)\n//           .fill(null)\n//           .map((_, index) => renderPlayerCard(players[index] || null, index))}\n//       </div>\n\n//       <footer className=\"page-footer\">\n//         <p>\n//           {players.length > 0\n//             ? `Showing ${players.length} players • Data from local file`\n//             : \"Data from local file\"}\n//         </p>\n//       </footer>\n//     </div>\n//   );\n// };\n\n// export default PlayersPage;\nvar _c;\n$RefreshReg$(_c, \"PlayersPage\");","map":{"version":3,"names":["useEffect","useState","jsxDEV","_jsxDEV","PlayersPage","_s","players","setPlayers","loading","setLoading","error","setError","debugInfo","setDebugInfo","getCountryCode","country","countryMap","ENGLAND","SCOTLAND","WALES","SPAIN","AUSTRALIA","JAPAN","NORWAY","SWEDEN","DENMARK","GERMANY","FRANCE","ITALY","CANADA","ARGENTINA","CHILE","COLOMBIA","MEXICO","THAILAND","CHINA","INDIA","PHILIPPINES","FINLAND","AUSTRIA","BELGIUM","NETHERLANDS","IRELAND","SLOVENIA","toUpperCase","getRankChange","rank","priorRank","change","type","value","symbol","Math","abs","fetchPlayers","response","fetch","ok","Error","status","statusText","data","json","console","log","Array","isArray","playersData","slice","length","name","season","err","errorMessage","message","includes","renderPlayerRow","player","index","rankChange","prior_rank","countryCode","children","className","fileName","_jsxFileName","lineNumber","columnNumber","style","backgroundImage","backgroundColor","first_name","last_name","statistics","avg_points","toFixed","events_played","points_lost","points_gained","id","renderLoadingRow","fill","map","_","_c","$RefreshReg$"],"sources":["/Users/michaelgarchitorena/Documents/GitHub/golf_project/golf-rankings-app/src/PlayersPage.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport \"./PlayersPage.css\";\n\ninterface Player {\n  id: string;\n  first_name: string;\n  last_name: string;\n  country: string;\n  rank: number;\n  prior_rank: number;\n  abbr_name: string;\n  statistics: {\n    events_played: number;\n    avg_points: number;\n    points: number;\n    points_lost: number;\n    points_gained: number;\n  };\n}\n\ninterface ApiResponse {\n  id: string;\n  name: string;\n  alias: string;\n  status: string;\n  season: number;\n  players: Player[];\n}\n\nconst PlayersPage: React.FC = () => {\n  const [players, setPlayers] = useState<Player[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [debugInfo, setDebugInfo] = useState<string>(\"\");\n\n  const getCountryCode = (country: string): string => {\n    const countryMap: { [key: string]: string } = {\n      \"UNITED STATES\": \"us\",\n      \"NORTHERN IRELAND\": \"gb-nir\",\n      ENGLAND: \"gb-eng\",\n      SCOTLAND: \"gb-sct\",\n      WALES: \"gb-wls\",\n      SPAIN: \"es\",\n      AUSTRALIA: \"au\",\n      \"SOUTH KOREA\": \"kr\",\n      JAPAN: \"jp\",\n      NORWAY: \"no\",\n      SWEDEN: \"se\",\n      DENMARK: \"dk\",\n      GERMANY: \"de\",\n      FRANCE: \"fr\",\n      ITALY: \"it\",\n      CANADA: \"ca\",\n      \"SOUTH AFRICA\": \"za\",\n      ARGENTINA: \"ar\",\n      CHILE: \"cl\",\n      COLOMBIA: \"co\",\n      MEXICO: \"mx\",\n      THAILAND: \"th\",\n      \"CHINESE TAIPEI\": \"tw\",\n      CHINA: \"cn\",\n      INDIA: \"in\",\n      PHILIPPINES: \"ph\",\n      \"NEW ZEALAND\": \"nz\",\n      FINLAND: \"fi\",\n      AUSTRIA: \"at\",\n      BELGIUM: \"be\",\n      NETHERLANDS: \"nl\",\n      IRELAND: \"ie\",\n      \"CZECH REPUBLIC\": \"cz\",\n      SLOVENIA: \"si\",\n    };\n    return countryMap[country.toUpperCase()] || \"unknown\";\n  };\n\n  const getRankChange = (rank: number, priorRank: number) => {\n    const change = priorRank - rank;\n    if (change > 0) {\n      return { type: \"up\", value: change, symbol: \"▲\" };\n    } else if (change < 0) {\n      return { type: \"down\", value: Math.abs(change), symbol: \"▼\" };\n    } else {\n      return { type: \"same\", value: 0, symbol: \"–\" };\n    }\n  };\n\n  useEffect(() => {\n    const fetchPlayers = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        setDebugInfo(\"Loading data from local file...\");\n\n        // Load from local JSON file instead of API\n        const response = await fetch(\"/world_rankings.json\");\n\n        if (!response.ok) {\n          throw new Error(\n            `Failed to load world_rankings.json: ${response.status} ${response.statusText}`\n          );\n        }\n\n        const data: ApiResponse = await response.json();\n        console.log(\"Raw JSON Data:\", data);\n\n        // Extract players from the API response\n        if (data.players && Array.isArray(data.players)) {\n          const playersData = data.players.slice(0, 50); // Show top 50 players\n\n          setPlayers(playersData);\n          setDebugInfo(\n            `✅ Successfully loaded ${playersData.length} players from ${data.name} (${data.season})`\n          );\n          setError(null);\n        } else {\n          throw new Error(\"No players array found in the response\");\n        }\n      } catch (err: any) {\n        console.error(\"Error loading local data:\", err);\n\n        let errorMessage = \"Unknown error occurred\";\n\n        if (err.message.includes(\"Failed to load world_rankings.json\")) {\n          errorMessage =\n            \"📁 File Not Found: Make sure world_rankings.json is in your public folder\";\n        } else if (err.message.includes(\"Unexpected token\")) {\n          errorMessage =\n            \"📄 JSON Parse Error: world_rankings.json contains invalid JSON\";\n        } else if (err.message.includes(\"No player\")) {\n          errorMessage = `📊 Data Format Issue: ${err.message}`;\n        } else {\n          errorMessage = `❌ Error: ${err.message}`;\n        }\n\n        setError(errorMessage);\n        setDebugInfo(`Error: ${err.message}`);\n        setPlayers([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchPlayers();\n  }, []);\n\n  const renderPlayerRow = (player: Player, index: number) => {\n    const rankChange = getRankChange(player.rank, player.prior_rank);\n    const countryCode = getCountryCode(player.country);\n\n    return (\n      <tr key={player.id}>\n        <td className=\"rank-cell\">\n          {player.rank}\n          <span className={`rank-change ${rankChange.type}`}>\n            {rankChange.symbol}\n          </span>\n        </td>\n        <td className=\"rank-cell\">{player.prior_rank}</td>\n        <td>\n          <span\n            className=\"country-flag\"\n            style={{\n              backgroundImage:\n                countryCode !== \"unknown\"\n                  ? `url(https://flagcdn.com/20x15/${countryCode}.png)`\n                  : \"none\",\n              backgroundColor:\n                countryCode === \"unknown\" ? \"#ccc\" : \"transparent\",\n            }}\n          ></span>\n          {player.country}\n        </td>\n        <td className=\"player-name-cell\">\n          {`${player.first_name} ${player.last_name}`}\n        </td>\n        <td className=\"points-cell\">\n          {player.statistics.avg_points.toFixed(4)}\n        </td>\n        {/* <td className=\"points-cell\">\n          {player.statistics.points.toFixed(2)}\n          <span className=\"points-change points-lost\">\n            {player.statistics.points_lost.toFixed(0)}\n          </span>\n        </td> */}\n        <td className=\"events-cell\">{player.statistics.events_played}</td>\n        <td className=\"points-change points-lost\">\n          {player.statistics.points_lost.toFixed(2)}\n        </td>\n        <td className=\"points-change points-gained\">\n          {player.statistics.points_gained.toFixed(2)}\n        </td>\n      </tr>\n    );\n  };\n\n  const renderLoadingRow = (index: number) => (\n    <tr key={`loading-${index}`} className=\"loading-row\">\n      <td>--</td>\n      <td>--</td>\n      <td>--</td>\n      <td>Loading...</td>\n      <td>--</td>\n      <td>--</td>\n      <td>--</td>\n      <td>--</td>\n    </tr>\n  );\n\n  return (\n    <div className=\"players-page\">\n      <header className=\"page-header\">\n        <h1>World Golf Rankings</h1>\n        <p>Current top players in professional golf</p>\n      </header>\n\n      {/* Debug Info */}\n      {/* {debugInfo && (\n        <div className=\"debug-info\">\n          <small>Debug: {debugInfo}</small>\n        </div>\n      )} */}\n\n      {loading && (\n        <div className=\"loading-container\">\n          <p>Loading players from local data...</p>\n        </div>\n      )}\n\n      {error && (\n        <div className=\"error-container\">\n          <h3>🚨 Data Loading Issue</h3>\n          <p>\n            <strong>Error:</strong> {error}\n          </p>\n          <details>\n            <summary>Setup Instructions</summary>\n            <ul>\n              <li>\n                <strong>Create the file:</strong> Add world_rankings.json to\n                your public folder\n              </li>\n              <li>\n                <strong>File location:</strong> public/world_rankings.json (in\n                React apps)\n              </li>\n              <li>\n                <strong>JSON format:</strong> Make sure the file contains valid\n                JSON\n              </li>\n              {/* <li><strong>Sample structure:</strong> {\"id\": \"...\", \"name\": \"World Golf Ranking\", \"players\": [{\"id\": \"...\", \"first_name\": \"Scottie\", \"last_name\": \"Scheffler\", \"country\": \"UNITED STATES\", \"rank\": 1, \"statistics\": {\"avg_points\": 18.35, \"points\": 752.5029}}]}</li> */}\n              <li>\n                <strong>Browser Console:</strong> Check for detailed error\n                messages\n              </li>\n            </ul>\n          </details>\n        </div>\n      )}\n\n      <div className=\"table-container\">\n        <table className=\"players-table\">\n          <thead>\n            <tr>\n              <th>Ranking</th>\n              <th>Last Week</th>\n              <th>Ctry</th>\n              <th>Name</th>\n              <th>Average Points</th>\n              <th>Events Played (Divisor)</th>\n              <th>Points Lost (2025)</th>\n              <th>Points Won (2025)</th>\n            </tr>\n          </thead>\n          <tbody>\n            {loading\n              ? Array(20)\n                  .fill(null)\n                  .map((_, index) => renderLoadingRow(index))\n              : players.map((player, index) => renderPlayerRow(player, index))}\n          </tbody>\n        </table>\n      </div>\n\n      <footer className=\"page-footer\">\n        <p>\n          {players.length > 0\n            ? `Showing ${players.length} players • Data from local file`\n            : \"Data from local file\"}\n        </p>\n      </footer>\n    </div>\n  );\n};\n\nexport default PlayersPage;\n\n// import { useEffect, useState } from \"react\";\n// import \"./PlayersPage.css\";\n\n// interface Player {\n//   id: string;\n//   name: string;\n//   country: string;\n//   rank: number;\n//   points: number;\n// }\n\n// interface ApiResponse {\n//   rankings?: Player[];\n//   players?: Player[];\n//   data?: any;\n//   [key: string]: any;\n// }\n\n// const PlayersPage: React.FC = () => {\n//   const [players, setPlayers] = useState<Player[]>([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState<string | null>(null);\n//   const [debugInfo, setDebugInfo] = useState<string>(\"\");\n\n//   useEffect(() => {\n//     const fetchPlayers = async () => {\n//       try {\n//         setLoading(true);\n//         setError(null);\n//         setDebugInfo(\"Loading data from local file...\");\n\n//         // Load from local JSON file instead of API\n//         const response = await fetch(\"/world_rankings.json\");\n\n//         if (!response.ok) {\n//           throw new Error(\n//             `Failed to load world_rankings.json: ${response.status} ${response.statusText}`\n//           );\n//         }\n\n//         const data: ApiResponse = await response.json();\n//         console.log(\"Raw JSON Data:\", data);\n//         console.log(\"Response keys:\", Object.keys(data));\n\n//         // Extract players from the specific Sportradar WGR format\n//         let playersData: Player[] = [];\n\n//         if (data.players && Array.isArray(data.players)) {\n//           playersData = data.players.map((player: any) => ({\n//             id: player.id || \"unknown\",\n//             name:\n//               `${player.first_name || \"\"} ${player.last_name || \"\"}`.trim() ||\n//               \"Unknown Player\",\n//             country: player.country || \"Unknown\",\n//             rank: player.rank || 0,\n//             points:\n//               player.statistics?.avg_points ||\n//               player.statistics?.avg_points ||\n//               0,\n//           }));\n//           setDebugInfo(\n//             `Found ${playersData.length} players from Sportradar WGR format`\n//           );\n//         } else {\n//           // Fallback to other possible formats\n//           if (data.rankings && Array.isArray(data.rankings)) {\n//             playersData = data.rankings.map((player: any, index: number) => ({\n//               id: player.id || `player-${index + 1}`,\n//               name: player.name || \"Unknown Player\",\n//               country: player.country || player.nationality || \"Unknown\",\n//               rank: player.rank || player.position || index + 1,\n//               points: player.points || player.average_points || 0,\n//             }));\n//           } else if (Array.isArray(data)) {\n//             playersData = data.map((player: any, index: number) => ({\n//               id: player.id || `player-${index + 1}`,\n//               name: player.name || player.full_name || \"Unknown Player\",\n//               country: player.country || player.nationality || \"Unknown\",\n//               rank: player.rank || index + 1,\n//               points: player.avg_points || 0,\n//             }));\n//           } else {\n//             // Look for any array in the response\n//             const possibleArrays = Object.entries(data)\n//               .filter(([key, value]) => Array.isArray(value))\n//               .map(([key, value]) => ({ key, value: value as any[] }));\n\n//             if (possibleArrays.length > 0) {\n//               const arrayData = possibleArrays[0].value;\n//               playersData = arrayData.map((player: any, index: number) => ({\n//                 id: player.id || `player-${index + 1}`,\n//                 name: player.name || player.full_name || \"Unknown Player\",\n//                 country: player.country || player.nationality || \"Unknown\",\n//                 rank: player.rank || index + 1,\n//                 points: player.avg_points || 0,\n//               }));\n//               setDebugInfo(\n//                 `Found ${playersData.length} players in '${possibleArrays[0].key}' field`\n//               );\n//             } else {\n//               console.log(\"Unexpected data structure:\", data);\n//               setDebugInfo(\n//                 `Unexpected response format. Keys: ${Object.keys(data).join(\n//                   \", \"\n//                 )}`\n//               );\n//               throw new Error(\n//                 `No player array found. Available keys: ${Object.keys(\n//                   data\n//                 ).join(\", \")}`\n//               );\n//             }\n//           }\n//         }\n\n//         if (playersData.length === 0) {\n//           throw new Error(\"No player data found in response\");\n//         }\n\n//         // Clean and validate the data\n//         const validPlayers = playersData\n//           .filter(\n//             (player) =>\n//               player && player.name && player.name !== \"Unknown Player\"\n//           )\n//           .slice(0, 20); // Top 20 players\n\n//         if (validPlayers.length === 0) {\n//           throw new Error(\"No valid player data after filtering\");\n//         }\n\n//         setPlayers(validPlayers);\n//         setDebugInfo(\n//           `✅ Successfully loaded ${validPlayers.length} players from local file`\n//         );\n//         setError(null);\n//       } catch (err: any) {\n//         console.error(\"Error loading local data:\", err);\n\n//         let errorMessage = \"Unknown error occurred\";\n\n//         if (err.message.includes(\"Failed to load world_rankings.json\")) {\n//           errorMessage =\n//             \"📁 File Not Found: Make sure world_rankings.json is in your public folder\";\n//         } else if (err.message.includes(\"Unexpected token\")) {\n//           errorMessage =\n//             \"📄 JSON Parse Error: world_rankings.json contains invalid JSON\";\n//         } else if (err.message.includes(\"No player\")) {\n//           errorMessage = `📊 Data Format Issue: ${err.message}`;\n//         } else {\n//           errorMessage = `❌ Error: ${err.message}`;\n//         }\n\n//         setError(errorMessage);\n//         setDebugInfo(`Error: ${err.message}`);\n//         setPlayers([]);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchPlayers();\n//   }, []);\n\n//   const renderPlayerCard = (player: Player | null, index: number) => (\n//     <div key={index} className=\"player-card\">\n//       {player ? (\n//         <>\n//           <div className=\"player-rank\">#{player.rank}</div>\n//           <h3 className=\"player-name\">{player.name}</h3>\n//           <p className=\"player-country\">{player.country}</p>\n//           <div className=\"player-points\">\n//             {typeof player.points === \"number\" && player.points > 0\n//               ? `${player.points.toFixed(3)} points`\n//               : \"N/A points\"}\n//           </div>\n//         </>\n//       ) : (\n//         <>\n//           <div className=\"player-rank placeholder\">#--</div>\n//           <h3 className=\"player-name placeholder\">Loading...</h3>\n//           <p className=\"player-country placeholder\">--</p>\n//           <div className=\"player-points placeholder\">--Average points</div>\n//         </>\n//       )}\n//     </div>\n//   );\n\n//   return (\n//     <div className=\"players-page\">\n//       <header className=\"page-header\">\n//         <h1>World Golf Rankings</h1>\n//         <p>Current top players in professional golf</p>\n//       </header>\n\n//       {/* Debug Info */}\n//       {debugInfo && (\n//         <div className=\"debug-info\">\n//           <small>Debug: {debugInfo}</small>\n//         </div>\n//       )}\n\n//       {loading && (\n//         <div className=\"loading-container\">\n//           <p>Loading players from local data...</p>\n//         </div>\n//       )}\n\n//       {error && (\n//         <div className=\"error-container\">\n//           <h3>🚨 Data Loading Issue</h3>\n//           <p>\n//             <strong>Error:</strong> {error}\n//           </p>\n//           <details>\n//             <summary>Setup Instructions</summary>\n//             <ul>\n//               <li>\n//                 <strong>Create the file:</strong> Add world_rankings.json to\n//                 your public folder\n//               </li>\n//               <li>\n//                 <strong>File location:</strong> public/world_rankings.json (in\n//                 React apps)\n//               </li>\n//               <li>\n//                 <strong>JSON format:</strong> Make sure the file contains valid\n//                 JSON\n//               </li>\n//               {/* <li><strong>Sample structure:</strong> {\"id\": \"...\", \"name\": \"World Golf Ranking\", \"players\": [{\"id\": \"...\", \"first_name\": \"Scottie\", \"last_name\": \"Scheffler\", \"country\": \"UNITED STATES\", \"rank\": 1, \"statistics\": {\"points\": 752.5}}]}</li> */}\n//               <li>\n//                 <strong>Browser Console:</strong> Check for detailed error\n//                 messages\n//               </li>\n//             </ul>\n//           </details>\n//         </div>\n//       )}\n\n//       <div className=\"players-grid\">\n//         {Array(20)\n//           .fill(null)\n//           .map((_, index) => renderPlayerCard(players[index] || null, index))}\n//       </div>\n\n//       <footer className=\"page-footer\">\n//         <p>\n//           {players.length > 0\n//             ? `Showing ${players.length} players • Data from local file`\n//             : \"Data from local file\"}\n//         </p>\n//       </footer>\n//     </div>\n//   );\n// };\n\n// export default PlayersPage;\n"],"mappings":"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D,MAAM,GAAG,CAAC,GACf,WAAW/D,OAAO,CAAC+D,MAAM,iCAAiC,GAC1D;MAAsB;QAAAe,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV,CAAC;AAAClF,EAAA,CAvQID,WAAqB;AAAAoG,EAAA,GAArBpG,WAAqB;AAyQ3B,eAAeA,WAAW;;AAE1B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAoG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}