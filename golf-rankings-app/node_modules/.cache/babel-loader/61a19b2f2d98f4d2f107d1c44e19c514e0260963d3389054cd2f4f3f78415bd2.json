{"ast":null,"code":"var _jsxFileName = \"/Users/michaelgarchitorena/Documents/GitHub/golf_project/golf-rankings-app/src/GroupsContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// GroupsContext.tsx\nimport React, { createContext, useContext, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GroupsContext = /*#__PURE__*/createContext(undefined);\nexport const useGroups = () => {\n  _s();\n  const context = useContext(GroupsContext);\n  if (!context) {\n    throw new Error(\"useGroups must be used within a GroupsProvider\");\n  }\n  return context;\n};\n_s(useGroups, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const GroupsProvider = ({\n  children\n}) => {\n  _s2();\n  const [groups, setGroups] = useState([\n  // Initial sample data\n  {\n    id: \"1\",\n    name: \"Weekend Warriors\",\n    description: \"Casual golf betting group for weekend tournaments\",\n    members: [{\n      id: \"1\",\n      username: \"golfpro123\",\n      role: \"owner\",\n      joinedAt: new Date(\"2024-01-15\")\n    }, {\n      id: \"2\",\n      username: \"weekend_golfer\",\n      role: \"member\",\n      joinedAt: new Date(\"2024-01-20\")\n    }, {\n      id: \"3\",\n      username: \"birdie_hunter\",\n      role: \"member\",\n      joinedAt: new Date(\"2024-01-25\")\n    }],\n    maxMembers: 12,\n    entryFee: 25,\n    isPrivate: false,\n    owner: \"golfpro123\",\n    createdAt: new Date(\"2024-01-15\")\n  }, {\n    id: \"2\",\n    name: \"Masters Pool 2025\",\n    description: \"Annual Masters tournament pool with serious players only\",\n    members: [{\n      id: \"4\",\n      username: \"augusta_fan\",\n      role: \"owner\",\n      joinedAt: new Date(\"2024-02-01\")\n    }, {\n      id: \"5\",\n      username: \"green_jacket\",\n      role: \"member\",\n      joinedAt: new Date(\"2024-02-05\")\n    }],\n    maxMembers: 20,\n    entryFee: 50,\n    isPrivate: true,\n    owner: \"augusta_fan\",\n    createdAt: new Date(\"2024-02-01\")\n  }]);\n  const addGroup = groupData => {\n    const newGroup = {\n      ...groupData,\n      id: Date.now().toString(),\n      createdAt: new Date(),\n      members: [{\n        id: Date.now().toString(),\n        username: groupData.owner,\n        role: \"owner\",\n        joinedAt: new Date()\n      }]\n    };\n    setGroups(prev => [...prev, newGroup]);\n  };\n  const getGroup = id => {\n    return groups.find(group => group.id === id);\n  };\n  const joinGroup = (groupId, username) => {\n    setGroups(prev => prev.map(group => {\n      if (group.id === groupId && group.members.length < group.maxMembers) {\n        const newMember = {\n          id: Date.now().toString(),\n          username,\n          role: \"member\",\n          joinedAt: new Date()\n        };\n        return {\n          ...group,\n          members: [...group.members, newMember]\n        };\n      }\n      return group;\n    }));\n  };\n  const inviteMember = (groupId, username) => {\n    // In a real app, this would send an invitation\n    // For now, we'll just add them directly\n    joinGroup(groupId, username);\n  };\n  return /*#__PURE__*/_jsxDEV(GroupsContext.Provider, {\n    value: {\n      groups,\n      addGroup,\n      getGroup,\n      joinGroup,\n      inviteMember\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n};\n_s2(GroupsProvider, \"fMS/dvMJpQS/qABKkHAReqoXeeg=\");\n_c = GroupsProvider;\nvar _c;\n$RefreshReg$(_c, \"GroupsProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","GroupsContext","undefined","useGroups","_s","context","Error","GroupsProvider","children","_s2","groups","setGroups","id","name","description","members","username","role","joinedAt","Date","maxMembers","entryFee","isPrivate","owner","createdAt","addGroup","groupData","newGroup","now","toString","prev","getGroup","find","group","joinGroup","groupId","map","length","newMember","inviteMember","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/michaelgarchitorena/Documents/GitHub/golf_project/golf-rankings-app/src/GroupsContext.tsx"],"sourcesContent":["// GroupsContext.tsx\nimport React, { createContext, useContext, useState, ReactNode } from \"react\";\n\nexport interface Group {\n  id: string;\n  name: string;\n  description: string;\n  members: Member[];\n  maxMembers: number;\n  entryFee: number;\n  isPrivate: boolean;\n  owner: string;\n  createdAt: Date;\n}\n\nexport interface Member {\n  id: string;\n  username: string;\n  role: \"owner\" | \"member\";\n  joinedAt: Date;\n}\n\ninterface GroupsContextType {\n  groups: Group[];\n  addGroup: (group: Omit<Group, \"id\" | \"createdAt\">) => void;\n  getGroup: (id: string) => Group | undefined;\n  joinGroup: (groupId: string, username: string) => void;\n  inviteMember: (groupId: string, username: string) => void;\n}\n\nconst GroupsContext = createContext<GroupsContextType | undefined>(undefined);\n\nexport const useGroups = () => {\n  const context = useContext(GroupsContext);\n  if (!context) {\n    throw new Error(\"useGroups must be used within a GroupsProvider\");\n  }\n  return context;\n};\n\ninterface GroupsProviderProps {\n  children: ReactNode;\n}\n\nexport const GroupsProvider: React.FC<GroupsProviderProps> = ({ children }) => {\n  const [groups, setGroups] = useState<Group[]>([\n    // Initial sample data\n    {\n      id: \"1\",\n      name: \"Weekend Warriors\",\n      description: \"Casual golf betting group for weekend tournaments\",\n      members: [\n        {\n          id: \"1\",\n          username: \"golfpro123\",\n          role: \"owner\",\n          joinedAt: new Date(\"2024-01-15\"),\n        },\n        {\n          id: \"2\",\n          username: \"weekend_golfer\",\n          role: \"member\",\n          joinedAt: new Date(\"2024-01-20\"),\n        },\n        {\n          id: \"3\",\n          username: \"birdie_hunter\",\n          role: \"member\",\n          joinedAt: new Date(\"2024-01-25\"),\n        },\n      ],\n      maxMembers: 12,\n      entryFee: 25,\n      isPrivate: false,\n      owner: \"golfpro123\",\n      createdAt: new Date(\"2024-01-15\"),\n    },\n    {\n      id: \"2\",\n      name: \"Masters Pool 2025\",\n      description: \"Annual Masters tournament pool with serious players only\",\n      members: [\n        {\n          id: \"4\",\n          username: \"augusta_fan\",\n          role: \"owner\",\n          joinedAt: new Date(\"2024-02-01\"),\n        },\n        {\n          id: \"5\",\n          username: \"green_jacket\",\n          role: \"member\",\n          joinedAt: new Date(\"2024-02-05\"),\n        },\n      ],\n      maxMembers: 20,\n      entryFee: 50,\n      isPrivate: true,\n      owner: \"augusta_fan\",\n      createdAt: new Date(\"2024-02-01\"),\n    },\n  ]);\n\n  const addGroup = (groupData: Omit<Group, \"id\" | \"createdAt\">) => {\n    const newGroup: Group = {\n      ...groupData,\n      id: Date.now().toString(),\n      createdAt: new Date(),\n      members: [\n        {\n          id: Date.now().toString(),\n          username: groupData.owner,\n          role: \"owner\",\n          joinedAt: new Date(),\n        },\n      ],\n    };\n    setGroups((prev) => [...prev, newGroup]);\n  };\n\n  const getGroup = (id: string): Group | undefined => {\n    return groups.find((group) => group.id === id);\n  };\n\n  const joinGroup = (groupId: string, username: string) => {\n    setGroups((prev) =>\n      prev.map((group) => {\n        if (group.id === groupId && group.members.length < group.maxMembers) {\n          const newMember: Member = {\n            id: Date.now().toString(),\n            username,\n            role: \"member\",\n            joinedAt: new Date(),\n          };\n          return {\n            ...group,\n            members: [...group.members, newMember],\n          };\n        }\n        return group;\n      })\n    );\n  };\n\n  const inviteMember = (groupId: string, username: string) => {\n    // In a real app, this would send an invitation\n    // For now, we'll just add them directly\n    joinGroup(groupId, username);\n  };\n\n  return (\n    <GroupsContext.Provider\n      value={{\n        groups,\n        addGroup,\n        getGroup,\n        joinGroup,\n        inviteMember,\n      }}\n    >\n      {children}\n    </GroupsContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}