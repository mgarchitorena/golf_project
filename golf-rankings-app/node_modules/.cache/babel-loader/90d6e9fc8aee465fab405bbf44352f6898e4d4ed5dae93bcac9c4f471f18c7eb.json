{"ast":null,"code":"var _jsxFileName = \"/Users/michaelgarchitorena/Downloads/golf_project/golf-rankings-app/src/PlayersPage.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport './PlayersPage.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PlayersPage = () => {\n  _s();\n  const [players, setPlayers] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [debugInfo, setDebugInfo] = useState('');\n  useEffect(() => {\n    const fetchPlayers = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        setDebugInfo('Loading data from local file...');\n\n        // Load from local JSON file instead of API\n        const response = await fetch('/world_rankings.json');\n        if (!response.ok) {\n          throw new Error(`Failed to load world_rankings.json: ${response.status} ${response.statusText}`);\n        }\n        const data = await response.json();\n        console.log('Raw JSON Data:', data);\n        console.log('Response keys:', Object.keys(data));\n\n        // Extract players from the specific Sportradar WGR format\n        let playersData = [];\n        if (data.players && Array.isArray(data.players)) {\n          playersData = data.players.map(player => {\n            var _player$statistics, _player$statistics2;\n            return {\n              id: player.id || 'unknown',\n              name: `${player.first_name || ''} ${player.last_name || ''}`.trim() || 'Unknown Player',\n              country: player.country || 'Unknown',\n              rank: player.rank || 0,\n              points: ((_player$statistics = player.statistics) === null || _player$statistics === void 0 ? void 0 : _player$statistics.points) || ((_player$statistics2 = player.statistics) === null || _player$statistics2 === void 0 ? void 0 : _player$statistics2.avg_points) || 0\n            };\n          });\n          setDebugInfo(`Found ${playersData.length} players from Sportradar WGR format`);\n        } else {\n          // Fallback to other possible formats\n          if (data.rankings && Array.isArray(data.rankings)) {\n            playersData = data.rankings.map((player, index) => ({\n              id: player.id || `player-${index + 1}`,\n              name: player.name || 'Unknown Player',\n              country: player.country || player.nationality || 'Unknown',\n              rank: player.rank || player.position || index + 1,\n              points: player.points || player.average_points || 0\n            }));\n          } else if (Array.isArray(data)) {\n            playersData = data.map((player, index) => ({\n              id: player.id || `player-${index + 1}`,\n              name: player.name || player.full_name || 'Unknown Player',\n              country: player.country || player.nationality || 'Unknown',\n              rank: player.rank || index + 1,\n              points: player.points || 0\n            }));\n          } else {\n            // Look for any array in the response\n            const possibleArrays = Object.entries(data).filter(([key, value]) => Array.isArray(value)).map(([key, value]) => ({\n              key,\n              value: value\n            }));\n            if (possibleArrays.length > 0) {\n              const arrayData = possibleArrays[0].value;\n              playersData = arrayData.map((player, index) => ({\n                id: player.id || `player-${index + 1}`,\n                name: player.name || player.full_name || 'Unknown Player',\n                country: player.country || player.nationality || 'Unknown',\n                rank: player.rank || index + 1,\n                points: player.avgpoints || 0\n              }));\n              setDebugInfo(`Found ${playersData.length} players in '${possibleArrays[0].key}' field`);\n            } else {\n              console.log('Unexpected data structure:', data);\n              setDebugInfo(`Unexpected response format. Keys: ${Object.keys(data).join(', ')}`);\n              throw new Error(`No player array found. Available keys: ${Object.keys(data).join(', ')}`);\n            }\n          }\n        }\n        if (playersData.length === 0) {\n          throw new Error('No player data found in response');\n        }\n\n        // Clean and validate the data\n        const validPlayers = playersData.filter(player => player && player.name && player.name !== 'Unknown Player').slice(0, 20); // Top 20 players\n\n        if (validPlayers.length === 0) {\n          throw new Error('No valid player data after filtering');\n        }\n        setPlayers(validPlayers);\n        setDebugInfo(`✅ Successfully loaded ${validPlayers.length} players from local file`);\n        setError(null);\n      } catch (err) {\n        console.error('Error loading local data:', err);\n        let errorMessage = 'Unknown error occurred';\n        if (err.message.includes('Failed to load world_rankings.json')) {\n          errorMessage = '📁 File Not Found: Make sure world_rankings.json is in your public folder';\n        } else if (err.message.includes('Unexpected token')) {\n          errorMessage = '📄 JSON Parse Error: world_rankings.json contains invalid JSON';\n        } else if (err.message.includes('No player')) {\n          errorMessage = `📊 Data Format Issue: ${err.message}`;\n        } else {\n          errorMessage = `❌ Error: ${err.message}`;\n        }\n        setError(errorMessage);\n        setDebugInfo(`Error: ${err.message}`);\n        setPlayers([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchPlayers();\n  }, []);\n  const renderPlayerCard = (player, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"player-card\",\n    children: player ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player-rank\",\n        children: [\"#\", player.rank]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"player-name\",\n        children: player.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"player-country\",\n        children: player.country\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player-points\",\n        children: typeof player.points === 'number' && player.points > 0 ? `${player.points.toFixed(3)} points` : 'N/A points'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player-rank placeholder\",\n        children: \"#--\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"player-name placeholder\",\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"player-country placeholder\",\n        children: \"--\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player-points placeholder\",\n        children: \"-- points\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, index, false, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"players-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"page-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"World Golf Rankings\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Current top players in professional golf\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this), debugInfo && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"debug-info\",\n      children: /*#__PURE__*/_jsxDEV(\"small\", {\n        children: [\"Debug: \", debugInfo]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 9\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-container\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading players from local data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\uD83D\\uDEA8 Data Loading Issue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Error:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 14\n        }, this), \" \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"details\", {\n        children: [/*#__PURE__*/_jsxDEV(\"summary\", {\n          children: \"Setup Instructions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Create the file:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 19\n            }, this), \" Add world_rankings.json to your public folder\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"File location:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 19\n            }, this), \" public/world_rankings.json (in React apps)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"JSON format:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 19\n            }, this), \" Make sure the file contains valid JSON\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Browser Console:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 19\n            }, this), \" Check for detailed error messages\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"players-grid\",\n      children: Array(20).fill(null).map((_, index) => renderPlayerCard(players[index] || null, index))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      className: \"page-footer\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: players.length > 0 ? `Showing ${players.length} players • Data from local file` : 'Data from local file'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 5\n  }, this);\n};\n_s(PlayersPage, \"S8SLtHTQnI4PoNbX0K/9uIdYs0Y=\");\n_c = PlayersPage;\nexport default PlayersPage;\n\n// import React, { useState, useEffect } from 'react';\n\n// interface Player {\n//   id: string;\n//   name: string;\n//   country: string;\n//   rank: number;\n//   points: number;\n// }\n\n// interface ApiResponse {\n//   rankings: Array<{\n//     id: string;\n//     name: string;\n//     country: string;\n//     rank: number;\n//     points: number;\n//   }>;\n// }\n\n// const PlayersPage: React.FC = () => {\n//   const [players, setPlayers] = useState<Player[]>([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState<string | null>(null);\n\n//   useEffect(() => {\n//     const fetchPlayers = async () => {\n//       try {\n//         const apiKey = 'mI0K6O5QLl4C7PBOxGl46rBnfaemkzs0SOVokjP';\n//         const url = `https://api.sportradar.com/golf/trial/v3/en/players/wgr/2025/rankings.json?api_key=${apiKey}`;\n\n//         const response = await fetch(url);\n\n//         if (!response.ok) {\n//           throw new Error(`HTTP error! status: ${response.status}`);\n//         }\n\n//         const data: ApiResponse = await response.json();\n\n//         if (data.rankings && Array.isArray(data.rankings)) {\n//           setPlayers(data.rankings.slice(0, 20)); // Show top 20 players\n//         } else {\n//           throw new Error('Invalid data format');\n//         }\n//       } catch (err) {\n//         console.error('Error fetching players:', err);\n//         setError('Failed to load player data');\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchPlayers();\n//   }, []);\n\n//   const renderPlayerCard = (player: Player | null, index: number) => (\n//     <div \n//       key={index}\n//       style={{\n//         border: '1px solid #ddd',\n//         borderRadius: '8px',\n//         padding: '1.5rem',\n//         backgroundColor: '#f9f9f9',\n//         textAlign: 'center'\n//       }}\n//     >\n//       {player ? (\n//         <>\n//           <div style={{\n//             fontSize: '2rem',\n//             fontWeight: 'bold',\n//             color: '#2c5530',\n//             marginBottom: '0.5rem'\n//           }}>\n//             #{player.rank}\n//           </div>\n//           <h3 style={{\n//             margin: '0.5rem 0',\n//             color: '#333'\n//           }}>\n//             {player.name}\n//           </h3>\n//           <p style={{\n//             color: '#666',\n//             margin: '0.5rem 0'\n//           }}>\n//             {player.country}\n//           </p>\n//           <div style={{\n//             backgroundColor: '#2c5530',\n//             color: 'white',\n//             padding: '0.5rem',\n//             borderRadius: '4px',\n//             fontSize: '0.9rem'\n//           }}>\n//             {player.points} points\n//           </div>\n//         </>\n//       ) : (\n//         <>\n//           <div style={{\n//             fontSize: '2rem',\n//             fontWeight: 'bold',\n//             color: '#999',\n//             marginBottom: '0.5rem'\n//           }}>\n//             #--\n//           </div>\n//           <h3 style={{\n//             margin: '0.5rem 0',\n//             color: '#999'\n//           }}>\n//             TBD\n//           </h3>\n//           <p style={{\n//             color: '#999',\n//             margin: '0.5rem 0'\n//           }}>\n//             TBD\n//           </p>\n//           <div style={{\n//             backgroundColor: '#999',\n//             color: 'white',\n//             padding: '0.5rem',\n//             borderRadius: '4px',\n//             fontSize: '0.9rem'\n//           }}>\n//             TBD points\n//           </div>\n//         </>\n//       )}\n//     </div>\n//   );\n\n//   return (\n//     <div>\n//       <header style={{ textAlign: 'center', marginBottom: '2rem' }}>\n//         <h1 style={{ \n//           fontSize: '2.5rem', \n//           color: '#2c5530',\n//           marginBottom: '1rem'\n//         }}>\n//           World Golf Rankings\n//         </h1>\n//         <p style={{ \n//           fontSize: '1.1rem', \n//           color: '#666'\n//         }}>\n//           Current top players in professional golf\n//         </p>\n//       </header>\n\n//       {loading && (\n//         <div style={{ textAlign: 'center', padding: '2rem' }}>\n//           <p style={{ fontSize: '1.2rem', color: '#666' }}>Loading players...</p>\n//         </div>\n//       )}\n\n//       {error && (\n//         <div style={{ \n//           textAlign: 'center', \n//           padding: '2rem',\n//           backgroundColor: '#ffe6e6',\n//           border: '1px solid #ffb3b3',\n//           borderRadius: '8px',\n//           marginBottom: '2rem'\n//         }}>\n//           <p style={{ color: '#cc0000', fontSize: '1.1rem' }}>{error}</p>\n//         </div>\n//       )}\n\n//       <div style={{ \n//         display: 'grid', \n//         gridTemplateColumns: 'repeat(auto-fill, minmax(280px, 1fr))',\n//         gap: '1.5rem',\n//         marginBottom: '2rem'\n//       }}>\n//         {Array(20).fill(null).map((_, index) => \n//           renderPlayerCard(players[index] || null, index)\n//         )}\n//       </div>\n\n//       <footer style={{ \n//         textAlign: 'center', \n//         padding: '2rem 0',\n//         borderTop: '1px solid #eee',\n//         color: '#666'\n//       }}>\n//         <p>Data provided by Sportradar API</p>\n//       </footer>\n//     </div>\n//   );\n// };\n\n// export default PlayersPage;\nvar _c;\n$RefreshReg$(_c, \"PlayersPage\");","map":{"version":3,"names":["useEffect","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","PlayersPage","_s","players","setPlayers","loading","setLoading","error","setError","debugInfo","setDebugInfo","fetchPlayers","response","fetch","ok","Error","status","statusText","data","json","console","log","Object","keys","playersData","Array","isArray","map","player","_player$statistics","_player$statistics2","id","name","first_name","last_name","trim","country","rank","points","statistics","avg_points","length","rankings","index","nationality","position","average_points","full_name","possibleArrays","entries","filter","key","value","arrayData","avgpoints","join","validPlayers","slice","err","errorMessage","message","includes","renderPlayerCard","className","children","fileName","_jsxFileName","lineNumber","columnNumber","toFixed","fill","_","_c","$RefreshReg$"],"sources":["/Users/michaelgarchitorena/Downloads/golf_project/golf-rankings-app/src/PlayersPage.tsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport './PlayersPage.css';\n\ninterface Player {\n  id: string;\n  name: string;\n  country: string;\n  rank: number;\n  points: number;\n}\n\ninterface ApiResponse {\n  rankings?: Player[];\n  players?: Player[];\n  data?: any;\n  [key: string]: any;\n}\n\nconst PlayersPage: React.FC = () => {\n  const [players, setPlayers] = useState<Player[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [debugInfo, setDebugInfo] = useState<string>('');\n\n  useEffect(() => {\n    const fetchPlayers = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        setDebugInfo('Loading data from local file...');\n        \n        // Load from local JSON file instead of API\n        const response = await fetch('/world_rankings.json');\n        \n        if (!response.ok) {\n          throw new Error(`Failed to load world_rankings.json: ${response.status} ${response.statusText}`);\n        }\n        \n        const data: ApiResponse = await response.json();\n        console.log('Raw JSON Data:', data);\n        console.log('Response keys:', Object.keys(data));\n        \n        // Extract players from the specific Sportradar WGR format\n        let playersData: Player[] = [];\n        \n        if (data.players && Array.isArray(data.players)) {\n          playersData = data.players.map((player: any) => ({\n            id: player.id || 'unknown',\n            name: `${player.first_name || ''} ${player.last_name || ''}`.trim() || 'Unknown Player',\n            country: player.country || 'Unknown',\n            rank: player.rank || 0,\n            points: player.statistics?.points || player.statistics?.avg_points || 0\n          }));\n          setDebugInfo(`Found ${playersData.length} players from Sportradar WGR format`);\n        } else {\n          // Fallback to other possible formats\n          if (data.rankings && Array.isArray(data.rankings)) {\n            playersData = data.rankings.map((player: any, index: number) => ({\n              id: player.id || `player-${index + 1}`,\n              name: player.name || 'Unknown Player',\n              country: player.country || player.nationality || 'Unknown',\n              rank: player.rank || player.position || index + 1,\n              points: player.points || player.average_points || 0\n            }));\n          } else if (Array.isArray(data)) {\n            playersData = data.map((player: any, index: number) => ({\n              id: player.id || `player-${index + 1}`,\n              name: player.name || player.full_name || 'Unknown Player',\n              country: player.country || player.nationality || 'Unknown',\n              rank: player.rank || index + 1,\n              points: player.points || 0\n            }));\n          } else {\n            // Look for any array in the response\n            const possibleArrays = Object.entries(data)\n              .filter(([key, value]) => Array.isArray(value))\n              .map(([key, value]) => ({ key, value: value as any[] }));\n            \n            if (possibleArrays.length > 0) {\n              const arrayData = possibleArrays[0].value;\n              playersData = arrayData.map((player: any, index: number) => ({\n                id: player.id || `player-${index + 1}`,\n                name: player.name || player.full_name || 'Unknown Player',\n                country: player.country || player.nationality || 'Unknown',\n                rank: player.rank || index + 1,\n                points: player.avgpoints || 0\n              }));\n              setDebugInfo(`Found ${playersData.length} players in '${possibleArrays[0].key}' field`);\n            } else {\n              console.log('Unexpected data structure:', data);\n              setDebugInfo(`Unexpected response format. Keys: ${Object.keys(data).join(', ')}`);\n              throw new Error(`No player array found. Available keys: ${Object.keys(data).join(', ')}`);\n            }\n          }\n        }\n        \n        if (playersData.length === 0) {\n          throw new Error('No player data found in response');\n        }\n        \n        // Clean and validate the data\n        const validPlayers = playersData\n          .filter(player => player && player.name && player.name !== 'Unknown Player')\n          .slice(0, 20); // Top 20 players\n        \n        if (validPlayers.length === 0) {\n          throw new Error('No valid player data after filtering');\n        }\n        \n        setPlayers(validPlayers);\n        setDebugInfo(`✅ Successfully loaded ${validPlayers.length} players from local file`);\n        setError(null);\n        \n      } catch (err: any) {\n        console.error('Error loading local data:', err);\n        \n        let errorMessage = 'Unknown error occurred';\n        \n        if (err.message.includes('Failed to load world_rankings.json')) {\n          errorMessage = '📁 File Not Found: Make sure world_rankings.json is in your public folder';\n        } else if (err.message.includes('Unexpected token')) {\n          errorMessage = '📄 JSON Parse Error: world_rankings.json contains invalid JSON';\n        } else if (err.message.includes('No player')) {\n          errorMessage = `📊 Data Format Issue: ${err.message}`;\n        } else {\n          errorMessage = `❌ Error: ${err.message}`;\n        }\n        \n        setError(errorMessage);\n        setDebugInfo(`Error: ${err.message}`);\n        setPlayers([]);\n        \n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchPlayers();\n  }, []);\n\n  const renderPlayerCard = (player: Player | null, index: number) => (\n    <div key={index} className=\"player-card\">\n      {player ? (\n        <>\n          <div className=\"player-rank\">#{player.rank}</div>\n          <h3 className=\"player-name\">{player.name}</h3>\n          <p className=\"player-country\">{player.country}</p>\n          <div className=\"player-points\">\n            {typeof player.points === 'number' && player.points > 0\n              ? `${player.points.toFixed(3)} points`\n              : 'N/A points'\n            }\n          </div>\n        </>\n      ) : (\n        <>\n          <div className=\"player-rank placeholder\">#--</div>\n          <h3 className=\"player-name placeholder\">Loading...</h3>\n          <p className=\"player-country placeholder\">--</p>\n          <div className=\"player-points placeholder\">-- points</div>\n        </>\n      )}\n    </div>\n  );\n\n  return (\n    <div className=\"players-page\">\n      <header className=\"page-header\">\n        <h1>World Golf Rankings</h1>\n        <p>Current top players in professional golf</p>\n      </header>\n\n      {/* Debug Info */}\n      {debugInfo && (\n        <div className=\"debug-info\">\n          <small>Debug: {debugInfo}</small>\n        </div>\n      )}\n\n      {loading && (\n        <div className=\"loading-container\">\n          <p>Loading players from local data...</p>\n        </div>\n      )}\n\n      {error && (\n        <div className=\"error-container\">\n          <h3>🚨 Data Loading Issue</h3>\n          <p><strong>Error:</strong> {error}</p>\n          <details>\n            <summary>Setup Instructions</summary>\n            <ul>\n              <li><strong>Create the file:</strong> Add world_rankings.json to your public folder</li>\n              <li><strong>File location:</strong> public/world_rankings.json (in React apps)</li>\n              <li><strong>JSON format:</strong> Make sure the file contains valid JSON</li>\n              {/* <li><strong>Sample structure:</strong> {\"id\": \"...\", \"name\": \"World Golf Ranking\", \"players\": [{\"id\": \"...\", \"first_name\": \"Scottie\", \"last_name\": \"Scheffler\", \"country\": \"UNITED STATES\", \"rank\": 1, \"statistics\": {\"points\": 752.5}}]}</li> */}\n              <li><strong>Browser Console:</strong> Check for detailed error messages</li>\n            </ul>\n          </details>\n        </div>\n      )}\n\n      <div className=\"players-grid\">\n        {Array(20).fill(null).map((_, index) => \n          renderPlayerCard(players[index] || null, index)\n        )}\n      </div>\n\n      <footer className=\"page-footer\">\n        <p>\n          {players.length > 0 \n            ? `Showing ${players.length} players • Data from local file`\n            : 'Data from local file'\n          }\n        </p>\n      </footer>\n    </div>\n  );\n};\n\nexport default PlayersPage;\n\n\n\n// import React, { useState, useEffect } from 'react';\n\n// interface Player {\n//   id: string;\n//   name: string;\n//   country: string;\n//   rank: number;\n//   points: number;\n// }\n\n// interface ApiResponse {\n//   rankings: Array<{\n//     id: string;\n//     name: string;\n//     country: string;\n//     rank: number;\n//     points: number;\n//   }>;\n// }\n\n// const PlayersPage: React.FC = () => {\n//   const [players, setPlayers] = useState<Player[]>([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState<string | null>(null);\n\n//   useEffect(() => {\n//     const fetchPlayers = async () => {\n//       try {\n//         const apiKey = 'mI0K6O5QLl4C7PBOxGl46rBnfaemkzs0SOVokjP';\n//         const url = `https://api.sportradar.com/golf/trial/v3/en/players/wgr/2025/rankings.json?api_key=${apiKey}`;\n        \n//         const response = await fetch(url);\n        \n//         if (!response.ok) {\n//           throw new Error(`HTTP error! status: ${response.status}`);\n//         }\n        \n//         const data: ApiResponse = await response.json();\n        \n//         if (data.rankings && Array.isArray(data.rankings)) {\n//           setPlayers(data.rankings.slice(0, 20)); // Show top 20 players\n//         } else {\n//           throw new Error('Invalid data format');\n//         }\n//       } catch (err) {\n//         console.error('Error fetching players:', err);\n//         setError('Failed to load player data');\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchPlayers();\n//   }, []);\n\n//   const renderPlayerCard = (player: Player | null, index: number) => (\n//     <div \n//       key={index}\n//       style={{\n//         border: '1px solid #ddd',\n//         borderRadius: '8px',\n//         padding: '1.5rem',\n//         backgroundColor: '#f9f9f9',\n//         textAlign: 'center'\n//       }}\n//     >\n//       {player ? (\n//         <>\n//           <div style={{\n//             fontSize: '2rem',\n//             fontWeight: 'bold',\n//             color: '#2c5530',\n//             marginBottom: '0.5rem'\n//           }}>\n//             #{player.rank}\n//           </div>\n//           <h3 style={{\n//             margin: '0.5rem 0',\n//             color: '#333'\n//           }}>\n//             {player.name}\n//           </h3>\n//           <p style={{\n//             color: '#666',\n//             margin: '0.5rem 0'\n//           }}>\n//             {player.country}\n//           </p>\n//           <div style={{\n//             backgroundColor: '#2c5530',\n//             color: 'white',\n//             padding: '0.5rem',\n//             borderRadius: '4px',\n//             fontSize: '0.9rem'\n//           }}>\n//             {player.points} points\n//           </div>\n//         </>\n//       ) : (\n//         <>\n//           <div style={{\n//             fontSize: '2rem',\n//             fontWeight: 'bold',\n//             color: '#999',\n//             marginBottom: '0.5rem'\n//           }}>\n//             #--\n//           </div>\n//           <h3 style={{\n//             margin: '0.5rem 0',\n//             color: '#999'\n//           }}>\n//             TBD\n//           </h3>\n//           <p style={{\n//             color: '#999',\n//             margin: '0.5rem 0'\n//           }}>\n//             TBD\n//           </p>\n//           <div style={{\n//             backgroundColor: '#999',\n//             color: 'white',\n//             padding: '0.5rem',\n//             borderRadius: '4px',\n//             fontSize: '0.9rem'\n//           }}>\n//             TBD points\n//           </div>\n//         </>\n//       )}\n//     </div>\n//   );\n\n//   return (\n//     <div>\n//       <header style={{ textAlign: 'center', marginBottom: '2rem' }}>\n//         <h1 style={{ \n//           fontSize: '2.5rem', \n//           color: '#2c5530',\n//           marginBottom: '1rem'\n//         }}>\n//           World Golf Rankings\n//         </h1>\n//         <p style={{ \n//           fontSize: '1.1rem', \n//           color: '#666'\n//         }}>\n//           Current top players in professional golf\n//         </p>\n//       </header>\n\n//       {loading && (\n//         <div style={{ textAlign: 'center', padding: '2rem' }}>\n//           <p style={{ fontSize: '1.2rem', color: '#666' }}>Loading players...</p>\n//         </div>\n//       )}\n\n//       {error && (\n//         <div style={{ \n//           textAlign: 'center', \n//           padding: '2rem',\n//           backgroundColor: '#ffe6e6',\n//           border: '1px solid #ffb3b3',\n//           borderRadius: '8px',\n//           marginBottom: '2rem'\n//         }}>\n//           <p style={{ color: '#cc0000', fontSize: '1.1rem' }}>{error}</p>\n//         </div>\n//       )}\n\n//       <div style={{ \n//         display: 'grid', \n//         gridTemplateColumns: 'repeat(auto-fill, minmax(280px, 1fr))',\n//         gap: '1.5rem',\n//         marginBottom: '2rem'\n//       }}>\n//         {Array(20).fill(null).map((_, index) => \n//           renderPlayerCard(players[index] || null, index)\n//         )}\n//       </div>\n\n//       <footer style={{ \n//         textAlign: 'center', \n//         padding: '2rem 0',\n//         borderTop: '1px solid #eee',\n//         color: '#666'\n//       }}>\n//         <p>Data provided by Sportradar API</p>\n//       </footer>\n//     </div>\n//   );\n// };\n\n// export default PlayersPage;\n"],"mappings":"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AAAC,YAAA;QAAA,OAC1E,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACP,CACN,eAEDtE,OAAA;MAAKiE,SAAS,EAAC,cAAc;MAAAC,QAAA,EAC1BvC,KAAK,CAAC,EAAE,CAAC,CAAC6C,IAAI,CAAC,IAAI,CAAC,CAAC3C,GAAG,CAAC,CAAC4C,CAAC,EAAE5B,KAAK,KACjCmB,gBAAgB,CAAC3D,OAAO,CAACwC,KAAK,CAAC,IAAI,IAAI,EAAEA,KAAK,CAChD;IAAC;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,eAENtE,OAAA;MAAQiE,SAAS,EAAC,aAAa;MAAAC,QAAA,eAC7BlE,OAAA;QAAAkE,QAAA,EACG7D,OAAO,CAACsC,MAAM,GAAG,CAAC,GACf,WAAWtC,OAAO,CAACsC,MAAM,iCAAiC,GAC1D;MAAsB;QAAAwB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEzB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV,CAAC;AAAClE,EAAA,CAxMID,WAAqB;AAAAuE,EAAA,GAArBvE,WAAqB;AA0M3B,eAAeA,WAAW;;AAI1B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAuE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}